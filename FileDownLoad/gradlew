package com.obex.lib;

import android.annotation.SuppressLint;
import android.text.TextUtils;
import android.util.Log;

import com.blankj.utilcode.util.ActivityUtils;
import com.blankj.utilcode.util.AppUtils;
import com.blankj.utilcode.util.LogUtils;
import com.obex.baselib.event.AlarmStartEvent;
import com.obex.baselib.event.MessageEvent;
import com.obex.baselib.model.NLPResult;
import com.obex.baselib.player.ObexAIUIPlayer;
import com.obex.baselib.player.ObexAudioPlayer;
import com.obex.baselib.player.ObexKKBOXPlayer;
import com.obex.baselib.utils.GlobalDataManager;
import com.obex.baselib.utils.StatuUtils;
import com.obex.baselib.utils.ThreadPoolManager;
import com.obex.lib.callback.AlarmCallBack;
import com.obex.lib.callback.UnityCallbackListener;
import com.obex.lib.enums.UnityDataType;
import com.obex.lib.model.MusicDataModel;
import com.obex.lib.scene.AnimalDataManager;
import com.obex.lib.scene.AnimalStateModel;
import com.obex.lib.scene.IdleScenneManager;
import com.obex.lib.scene.ScenesManager;

import org.greenrobot.eventbus.EventBus;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.TimeUnit;

import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;

import static com.obex.lib.enums.UnityDataType.ChangeRoleEnd;
import static com.obex.lib.enums.UnityDataType.ChangeSenceEnd;
import static com.obex.lib.enums.UnityDataType.ManagerInitEnd;
import static com.obex.lib.enums.UnityDataType.PRELOADEND;
import static com.obex.lib.enums.UnityDataType.PlayAniEnd;
import static com.obex.lib.enums.UnityDataType.SmartHomeEnd;
import static com.obex.lib.enums.UnityDataType.UnityInit;

public class UnityManager {
    private static String TAG = "UnityManager";
    private static UnityManager sInstance;
    public AndroidProxy mUnityAndroidProxy;

    UnityCallbackListener callbackListener;//设置P2A照片的回调
    //根据FunctionKey，添加UnityCallBackListener,每次回调后都是回调到哪里去
    private HashMap<String, UnityCallbackListener> unitHashMap = new HashMap<>();

    public CopyOnWriteArrayList<UnityCallbackListener> unityCallbackListenerList = new CopyOnWriteArrayList<>();

    public AlarmCallBack alarmCallBack;

    public int stateType = -1;//当前场景Type Listening 2
    public static boolean isShowListenTrigevent = true;

    public int p2aTotalCount = -1;//记住同步形象时数量

    public int unityBackCount = 0;//Unity回调

    private boolean isPlayEnd = false;//是否正在播报end动作

    private Disposable animTimeoutDisposable;//动作播报超时


    private boolean isUnityLiveing = true;//Unity是否活着


    private boolean ispause = false;//是否暂停

    private boolean isP2A = false;//是否正在P2A


    private int logLevel = 0;//设置日志等级

    private boolean isInitSuccess = false;//是否初始化成功

    private UnityManager() {

    }

    public static UnityManager getInstance() {
        if (sInstance == null) {
            synchronized (UnityManager.class) {
                if (sInstance == null) {
                    sInstance = new UnityManager();
                }
            }
        }
        return sInstance;
    }

    /**
     * 是否初始化成功
     *
     * @return
     */
    public boolean isInitSuccess() {
        return isInitSuccess;
    }

    public void setInitSuccess(boolean initSuccess) {
        isInitSuccess = initSuccess;
    }

    public void unitySetUnityAndroidProxy(AndroidProxy proxy) {
        this.mUnityAndroidProxy = proxy;

    }

    public void UnityCallBack(final int type, final int errCode, final String errMessage) {
        Log.d("UnityCallBack", "type==" + type + "errorCode=" + errCode + "errMessage===" + errMessage);
        notifiU3DCallBack(type, errCode, errMessage);


    }

    public void ResultToAndroid(int type, String message) {
//        LogUtils.dTag("ResultToAndroid", "返回数据：    type===" + type + "   message===" + message);
        resultCallback(type, message);
    }

    /**
     * 所有结果回调
     *
     * @param type
     * @param message
     */
    private synchronized void resultCallback(int type, String message) {
        isUnityLiveing = true;
        if (!TextUtils.isEmpty(message)) {
            int p2a = UnityUtils.getUnityReturnType(message);
            if (p2a == UnityDataType.SETP2A) {
                LogUtils.d("设置P2A图片回调成功");
                if (callbackListener != null) {
                    callbackListener.notifU3DComplete(UnityDataType.SETP2A, "");
                }
                isP2A = false;
            }
            unitCallBack(p2a, message);
        }
    }

    /**
     * 3D UI数据回调
     *
     * @param type
     * @param message
     */
    public void UnityCallAndroid(int type, String message) {
        LogUtils.d("type=="+type,"message=="+message);
        isUnityLiveing = true;
        //  LogUtils.d("UnityManager", "type===" + type + "